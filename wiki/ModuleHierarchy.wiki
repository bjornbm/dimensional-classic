#summary The module hierarchy of the dimensional library.


= Introduction =

The module hierarchy of dimensional library is an open question (as is the name). This page describes the current vision for the modules. Note that *the heirarchy and functionality described below is not reflected in the currently released version* of the library.


= Hierarchy =

 * Dimensional
 * Dimensional.SIUnits
 * Dimensional.NonSI
 * Dimensional.Prelude
 * Dimensional.Extensible (experimental)
 * Dimensional.ForwardAD (experimental, planned)


= Module summaries =


== Dimensional ==

The meat of code. Defines base dimensions and base SI units. Defines type classes, operators and functions necessary for working with physical quantities.

This module will exports as little as possible in terms of type classes and such. However, to facilitate some trickery (e.g. 'Dimensional.Extensible') the restrictions must be loosened somewhat  (but see 'Dimensional.Prelude').


== Dimensional.SIUnits ==

Defines the non-base SI units and units approved for use with SI. The only reason for this module is too keep 'Dimensional' smaller. Is this sensible?


== Dimensional.NonSI ==

Defines units outside of SI. Will never be "complete" but units will be added on an as-needed basis.


== Dimensional.Prelude ==

Contains no definition -- only re-exports other modules for users' convenience. More often than not this will be the only module users need to import.

The following modules will have a subset of their contents re-exported through 'Dimensional.Prelude':

 * Dimensional (a minimal subset will be re-exported)
 * Dimensional.SIUnits (will be re-exported in its entirety)
 * Prelude (will be re-exported in its entirety with the exception of definitions conflicting with those in 'Dimensional')


== Experimental modules ==

=== Dimensional.Extensible ===

Facilitates the use of custom dimensions (e.g. apples and oranges) in addition to the seven base dimensions.

=== Dimensional.ForwardAD (planned) ===

Will provide forward-mode automatic differentiation (in one variable) on functions of physical quantities. The intent is to provide at least a differentiation operator together with a lifting function to prevent [http://www.bcl.hamilton.ie/~qobi/nesting/papers/ifl2005.pdf perturbation confusion].

